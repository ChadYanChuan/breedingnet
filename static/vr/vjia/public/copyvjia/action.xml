<krpano>
	<autorotate enabled="true" waittime="1.5" speed="1"/>
	<action name="img_bgroundedge" type="Javascript">
		caller.sprite.style.borderRadius = args[1]+"px";
	</action>
	
	<!-- nav设置 action -->
	<action name="btn_position">
		set(_i,0);
		for(set(i,0), i LE 11, inc(i),
			txtadd(btn_name,'bottom_',get(i));
			if(layer[get(btn_name)].visible,
				set(layer[get(btn_name)].x, calc(_i * 70) );
				add(_i,1);
			);
		);
		set(layer[bottomright_btn].width, calc(_i * 70) );

	</action>
	
	<action name="btn_switch_visible">

		for(set(i,0), i LE 11, inc(i),
			txtadd(btn_name,'bottom_',get(i));
			if(layer[get(btn_name)].bid == %1,
				set(_btn_name,get(btn_name));
				break();
			);
		); 
		set(layer[get(_btn_name)].visible,%2);
		btn_position();
	</action>
	<!-- 打开某个按钮 高亮显示 -->
	<action name="btn_select">
		
		for(set(i,0), i LT layer.count, inc(i), 
			if(layer[get(i)].bid == %1,
				set(btn_select_i,get(i));
				break();
			);
		);
		
		set(layer[get(btn_select_i)].crop,calc(layer[get(btn_select_i)]._x + '|70|70|70'));
	</action>

	<!-- 导航高亮样式 还原为默认样式 -->
	<action name="auto_btn_restore">
		if(layer[skin_thumbs].state == 'opened',
			hide_thumbs_open(bottom_2);
		)
		set(layer[get(btn_select_i)].crop,calc(layer[get(btn_select_i)]._x + '|0|70|70'));
	</action>
	<!-- 显示某个具体的弹出窗口 -->
	<action name="show_win">
		if(%3,
			set(layer[close_btn].y,get(layer[%1].y));
			tween(layer[close_btn].y,120);
		);
		tween(layer[dm_mask].alpha,1);
		tween(layer[%1].y,%2);

	</action>
	
	<action name="hide_win">
		js(testJs("yyyyyyyyyyy"));
		tween(layer[dm_mask].alpha,0);
		set(layer[bottom_2].state,'close');
		set(layer[bottom_7].state,'close');
		set(layer[bottom_10].state,'close');

		set(layer[bottom_2].crop,calc(layer[bottom_2]._x + '|0|70|70'));
		set(layer[bottom_7].crop,calc(layer[bottom_7]._x + '|0|70|70'));
		set(layer[bottom_10].crop,calc(layer[bottom_10]._x + '|0|70|70'));
		
		tween(layer[thumb_bg].y,-210);
		tween(layer[share_bg].y,-540);
		tween(layer[about_bg].y,calc(0-1080-250));
		tween(layer[close_btn].y,-210);

		
		
		<!-- 重新设置button位置 -->
		auto_btn_restore();
	</action>
	<!-- 关闭打开状态的 thumbs -->
	<action name="hide_thumbs_open">
		js(testJs(%1));
		set(layer[%1].state,'close');
		set(layer[%1].crop,calc(layer[%1]._x + '|0|70|70'));
		skin_showthumbs(false);
	</action>

	<action name="btn_qrcode">
		if (layer[say_bg].visible, tween(layer[say_bg].alpha, 0); 
		delayedcall(0.5, set(layer[say_bg].visible, false)), set(layer[say_bg].visible, true); tween(layer[say_bg].alpha, 1));

	</action>
	<action name="sharetoggle">
		if(layer[%1].state == 'close' AND layer[bottom_2].state == 'close' AND layer[%2].state == 'close',
			set(layer[%1].state,'open');
			btn_select(share_btn);
			show_win(share_bg,120);
			,
			hide_win();
		)
		
	</action>
	<action name="abouttoggle">
		if(layer[%1].state == 'close' AND layer[bottom_2].state == 'close' AND layer[%2].state == 'close',
			set(layer[%1].state,'open');
			btn_select(about_btn);
			show_win(about_bg,-10);
			,
			hide_win();
		)
		
	</action>
	<!-- 背景音乐 -->
	<action name="bgsnd_action">
		if(layer[skin_thumbs].state == 'opened',
			hide_thumbs_open(bottom_2);
		,
		if(layer[%1].state == 'play',
			set(layer[%1].state,'stop');
			btn_select(sound_btn);
			resumesound(bg6);
			,
			set(layer[%1].state,'play');
			set(layer[%1].crop,calc(layer[%1]._x + '|0|70|70'));
			pausesound(bg6);
		)

		);
	</action>
	<!-- 缩略图切换 -->
	<action name="thumbstoggle">
		if(layer[%1].state == 'close',
			set(layer[%1].state,'open');
			btn_select(thum_btn);
			show_win(thumb_bg,120,true);
		,
			hide_win();
		)
		
		
	</action>
	
	<action name="switch_gyro">
		switch(plugin[skin_gyro].enabled);
		if(plugin[skin_gyro].enabled, skin_showmap(false));
	</action>

	<action name="map_hide">
		<!-- dm_switch_scene(); -->
		tween(layer[map_bg].x,calc(0-layer[map_bg].width),,,
			tween(layer[map_close_ico].rotate,0);
		);
	</action>
	
	<action name="skin_setup_littleplanetintro">
		copy(lp_scene, xml.scene);
		copy(lp_hlookat, view.hlookat);
		copy(lp_vlookat, view.vlookat);
		copy(lp_fov, view.fov);
		copy(lp_fovmax, view.fovmax);
		copy(lp_limitview, view.limitview);
		set(view.fovmax, 170);
		set(view.limitview, lookto);
		set(view.vlookatmin, 90);
		set(view.vlookatmax, 90);
		lookat(calc(lp_hlookat - 180), 90, 150, 1, 0, 0);
		set(events[lp_events].onloadcomplete,
			delayedcall(0.5,
				if(lp_scene === xml.scene,
					set(control.usercontrol, off);
					copy(view.limitview, lp_limitview);
					set(view.vlookatmin, null);
					set(view.vlookatmax, null);
					tween(view.hlookat|view.vlookat|view.fov|view.distortion, calc('' + lp_hlookat + '|' + lp_vlookat + '|' + lp_fov + '|' + 0.0),
						3.0, easeOutQuad,
						set(control.usercontrol, all);
						tween(view.fovmax, get(lp_fovmax));
						);
				  );
			  );
		  );
	</action>
	
</krpano>